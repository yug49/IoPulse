{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = \"http://localhost:5001/api\";\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle token expiration\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    window.location.reload();\n  }\n  return Promise.reject(error);\n});\n\n// Auth API functions\nexport const authAPI = {\n  // Sign up new user\n  signup: async userData => {\n    try {\n      const response = await api.post(\"/auth/signup\", userData);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: \"Network error\"\n      };\n    }\n  },\n  // Login user\n  login: async credentials => {\n    try {\n      const response = await api.post(\"/auth/login\", credentials);\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n        message: \"Network error\"\n      };\n    }\n  },\n  // Verify token and get user data\n  verifyToken: async () => {\n    try {\n      const response = await api.get(\"/auth/verify\");\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n        message: \"Network error\"\n      };\n    }\n  }\n};\n\n// Token management\nexport const tokenManager = {\n  setToken: token => {\n    localStorage.setItem(\"token\", token);\n  },\n  getToken: () => {\n    return localStorage.getItem(\"token\");\n  },\n  removeToken: () => {\n    localStorage.removeItem(\"token\");\n  }\n};\n\n// User management\nexport const userManager = {\n  setUser: user => {\n    localStorage.setItem(\"user\", JSON.stringify(user));\n  },\n  getUser: () => {\n    const user = localStorage.getItem(\"user\");\n    return user ? JSON.parse(user) : null;\n  },\n  removeUser: () => {\n    localStorage.removeUser(\"user\");\n  }\n};\n\n// Strategy API functions\nexport const strategyAPI = {\n  // Get all strategies for the user\n  getStrategies: async () => {\n    try {\n      const response = await api.get(\"/strategies\");\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n        message: \"Network error\"\n      };\n    }\n  },\n  // Get a single strategy by ID\n  getStrategy: async id => {\n    try {\n      const response = await api.get(`/strategies/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || {\n        message: \"Network error\"\n      };\n    }\n  },\n  // Create a new strategy\n  createStrategy: async strategyData => {\n    try {\n      const response = await api.post(\"/strategies\", strategyData);\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || {\n        message: \"Network error\"\n      };\n    }\n  },\n  // Update a strategy\n  updateStrategy: async (id, strategyData) => {\n    try {\n      const response = await api.put(`/strategies/${id}`, strategyData);\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || {\n        message: \"Network error\"\n      };\n    }\n  },\n  // Delete a strategy\n  deleteStrategy: async id => {\n    try {\n      const response = await api.delete(`/strategies/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response9;\n      throw ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || {\n        message: \"Network error\"\n      };\n    }\n  },\n  // Add a notification to a strategy\n  addNotification: async (id, notificationData) => {\n    try {\n      const response = await api.post(`/strategies/${id}/notifications`, notificationData);\n      return response.data;\n    } catch (error) {\n      var _error$response0;\n      throw ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.data) || {\n        message: \"Network error\"\n      };\n    }\n  },\n  // Respond to a notification\n  respondToNotification: async (strategyId, notificationId, responseData) => {\n    try {\n      const response = await api.post(`/strategies/${strategyId}/notifications/${notificationId}/respond`, responseData);\n      return response.data;\n    } catch (error) {\n      var _error$response1;\n      throw ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.data) || {\n        message: \"Network error\"\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","reload","Promise","reject","authAPI","signup","userData","post","data","_error$response2","message","login","credentials","_error$response3","verifyToken","get","_error$response4","tokenManager","setToken","setItem","getToken","removeToken","userManager","setUser","user","JSON","stringify","getUser","parse","removeUser","strategyAPI","getStrategies","_error$response5","getStrategy","id","_error$response6","createStrategy","strategyData","_error$response7","updateStrategy","put","_error$response8","deleteStrategy","delete","_error$response9","addNotification","notificationData","_error$response0","respondToNotification","strategyId","notificationId","responseData","_error$response1"],"sources":["/Users/shubhtastic/Documents/ionet/IoPulse/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_BASE_URL = \"http://localhost:5001/api\";\n\n// Create axios instance\nconst api = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n        \"Content-Type\": \"application/json\",\n    },\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n});\n\n// Handle token expiration\napi.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        if (error.response?.status === 401) {\n            // Token expired or invalid\n            localStorage.removeItem(\"token\");\n            localStorage.removeItem(\"user\");\n            window.location.reload();\n        }\n        return Promise.reject(error);\n    }\n);\n\n// Auth API functions\nexport const authAPI = {\n    // Sign up new user\n    signup: async (userData) => {\n        try {\n            const response = await api.post(\"/auth/signup\", userData);\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: \"Network error\" };\n        }\n    },\n\n    // Login user\n    login: async (credentials) => {\n        try {\n            const response = await api.post(\"/auth/login\", credentials);\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: \"Network error\" };\n        }\n    },\n\n    // Verify token and get user data\n    verifyToken: async () => {\n        try {\n            const response = await api.get(\"/auth/verify\");\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: \"Network error\" };\n        }\n    },\n};\n\n// Token management\nexport const tokenManager = {\n    setToken: (token) => {\n        localStorage.setItem(\"token\", token);\n    },\n\n    getToken: () => {\n        return localStorage.getItem(\"token\");\n    },\n\n    removeToken: () => {\n        localStorage.removeItem(\"token\");\n    },\n};\n\n// User management\nexport const userManager = {\n    setUser: (user) => {\n        localStorage.setItem(\"user\", JSON.stringify(user));\n    },\n\n    getUser: () => {\n        const user = localStorage.getItem(\"user\");\n        return user ? JSON.parse(user) : null;\n    },\n\n    removeUser: () => {\n        localStorage.removeUser(\"user\");\n    },\n};\n\n// Strategy API functions\nexport const strategyAPI = {\n    // Get all strategies for the user\n    getStrategies: async () => {\n        try {\n            const response = await api.get(\"/strategies\");\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: \"Network error\" };\n        }\n    },\n\n    // Get a single strategy by ID\n    getStrategy: async (id) => {\n        try {\n            const response = await api.get(`/strategies/${id}`);\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: \"Network error\" };\n        }\n    },\n\n    // Create a new strategy\n    createStrategy: async (strategyData) => {\n        try {\n            const response = await api.post(\"/strategies\", strategyData);\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: \"Network error\" };\n        }\n    },\n\n    // Update a strategy\n    updateStrategy: async (id, strategyData) => {\n        try {\n            const response = await api.put(`/strategies/${id}`, strategyData);\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: \"Network error\" };\n        }\n    },\n\n    // Delete a strategy\n    deleteStrategy: async (id) => {\n        try {\n            const response = await api.delete(`/strategies/${id}`);\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: \"Network error\" };\n        }\n    },\n\n    // Add a notification to a strategy\n    addNotification: async (id, notificationData) => {\n        try {\n            const response = await api.post(\n                `/strategies/${id}/notifications`,\n                notificationData\n            );\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: \"Network error\" };\n        }\n    },\n\n    // Respond to a notification\n    respondToNotification: async (strategyId, notificationId, responseData) => {\n        try {\n            const response = await api.post(\n                `/strategies/${strategyId}/notifications/${notificationId}/respond`,\n                responseData\n            );\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: \"Network error\" };\n        }\n    },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}